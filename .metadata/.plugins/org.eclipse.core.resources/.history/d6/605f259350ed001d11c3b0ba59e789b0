package day14.api.ramda.basic;

public class MainClass {
	
	public static void main(String[] args) {
		
		//car의 run을 사용할 때마다 매번 다른기능으로 사용해야한다면 =>익명클래스는 장점을 갖습니다. 익명클래스 사용!
		/*Car car = new Car() {
			
			@Override
			public void run() {
				
				System.out.println("익명 객체로 생성된 car"); 
				
			}
		};
		
		car.run();
		
		Car car2 = new Car() {
			
			@Override
			public void run() {
				
				System.out.println("다른 내용의 익명 객체로 car 생성"); 
				
			}
		};
		*/
		
		//익명객체 표현 문법을 => 람다표현형식으로 사용이 가능
		Person p = new Person();
		p.greeting(new Say01() {
			
			@Override
			public void hello() {

				System.out.println("헬로우 기능!"); 
				
			}
		});
		
		//Say01이 가지고있는 hello()를 전달하는 모형
		p.greeting(() -> {System.out.println("람다 헬로우!");});
		//1문법 - 사용할 문장이 1줄이라면 {} 생략가능
		p.greeting(() -> System.out.println( ("람다 헬로우!") ) );
		
		p.greeting(new Say02() {
			
			@Override
			public String hello(String a, int b) {
				//프로그래머가 작성한 내용
				return a + b; //문자열로 반환
			}
		});
		
		//2문법 - 람다의 매개변수는 타입이 생략될 수있다.
		// -프로그램 코드가 한줄이라면 return도 생략
		p.greeting( (a, b) -> a + b);
		
		
		public void greeting(Say03 say03) {
			
			boolean result = say03.bye(3);
			System.out.println(result);
		}
		
		
	}

}
